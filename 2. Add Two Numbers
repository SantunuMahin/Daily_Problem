2. Add Two Numbers
https://leetcode.com/problems/add-two-numbers/description/

class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode* l3 = new ListNode(0);
        int carry = 0;

        ListNode* head = l3;
        while(l1 != nullptr && l2 !=nullptr){
            int value = l1->val + l2->val +carry;
            carry = value/10;

            l3-> next = new ListNode(value%10);
            l1=l1 -> next;
            l2= l2 -> next;
            l3= l3 -> next;

        }
        while(l1 != nullptr ){
            int value = l1-> val + carry;
            carry = value/10;

            l3-> next = new ListNode(value%10);
            l1=l1->next;
            l3= l3->next;

        }
        while(l2 != nullptr ){
            int value = l2->val + carry;
            carry = value/10;

            l3-> next = new ListNode(value%10);
            l2=l2->next;
            l3= l3->next;

        }
        if(carry) l3 -> next = new ListNode(carry);

        return head->next;
    }
};




Explanation
Problem Statement

Given two non-empty linked lists representing two non-negative integers (with digits stored in reverse order), add the two numbers and return the sum as a linked list.
Approach

    Initialize a dummy head node to simplify edge cases

    Iterate through both lists simultaneously

    Calculate the sum of corresponding digits plus any carry from the previous sum

    Create new nodes for the result list with the digit value (sum % 10)

    Update the carry for the next iteration (sum / 10)

    Handle remaining digits if one list is longer than the other

    Check for any remaining carry after processing all digits

Key Improvements Over Original Code

    Single Loop: Combines the three separate while loops into one cleaner loop

    Null Checks: Handles cases where lists are of unequal length more elegantly

    Dummy Node: Uses a dummy head node to simplify the code (no special case for first node)

Complexity Analysis

    Time Complexity: O(max(m,n)) where m and n are lengths of the two lists

    Space Complexity: O(max(m,n)) for the resulting list

Example

For lists representing 342 (2→4→3) and 465 (5→6→4):

    2 + 5 = 7 (carry 0)

    4 + 6 = 0 (carry 1)

    3 + 4 + 1 = 8 (carry 0)
    Result: 7→0→8 (which represents 807)

This solution efficiently handles all edge cases including:

    Lists of different lengths

    Final carry that requires an additional digit

    Empty lists (though problem states they're non-empty)
